import { NextResponse, NextRequest } from "next/server";

// This will execute on teh server side when the request comes to the server. It intercepts the request
export const middleware = async(request: NextRequest, response: NextResponse) => {

    const authToken = request.headers.get('Authorization');

    if(!authToken) {
        console.log("Token is not present.....");
    }

    const isValidToken = true;
    if(!isValidToken) {
        // NextResponse.redirect('/login')
        return NextResponse.redirect(new URL('/', request.url));
    }

    return NextResponse.next();

    // For example, if request.url is http://example.com/dashboard/,
    // then new URL('/login', request.url) would result in a URL object representing http://example.com/login.

}

// The config object in a Next.js middleware file allows you to specify configuration options for the middleware
export const config = {
    matcher: '/dashboard/:path*',
    api: {
        bodyParser: true,
    }
}

/*

    1) middleware functions primarily focus on processing incoming requests

    2) When you export a middleware function along with its config object from a Next.js middleware file, 
       Next.js automatically recognizes it as a middleware and applies it to incoming requests based on the specified configuration.

    3) Next.js will invoke that middleware function with the request object as a parameter.
       The middleware function then has access to the request object, which contains information about the incoming HTTP request, 
       such as the request method, URL, headers, parameters, query parameters, and body (if present).

        This request consists of
        * url
        * Headers
        * HTTP Method
        * Body
        * Cookie
    
        Config -> 
    
        * matcher: the matcher property is used to define a URL pattern that specifies which incoming requests the 
             middleware should apply to.
             The :path* segment is a wildcard that matches zero or more path segments.
        * api:  This specifies that the configuration applies to API routes specifically.
        * bodyParser: false: By default, Next.js middleware automatically parses request bodies for API routes, 
                allowing you to access request data easily, In this case, it will not.

    4) the route handler refers to the function responsible for generating the response content for a specific route. This function runs on the server and 
       receives the incoming request, processes it, and generates an appropriate response. 
       The response generated by the route handler is then sent back to the client.

    5) We can create response in middleware and return it to the client without involvement of route handler like,
       const response = await NextResponse.next(request);
       const statusCode = response?.status;
       returnn response;
    
*/